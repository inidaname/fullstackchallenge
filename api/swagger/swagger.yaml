swagger: "2.0"
info:
  version: 1.0.0
  title: Full Stack Developer Challenge
  description: Interview challenge for full stack developer api documentation
  termsOfService: terms
  contact:
    name: Hassan Sani
    url: hassansani.me
    email: saniyhassan@gmail.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: "hassansani.me"
tags:
- name: "tenants"
  description: "Everything about the tenants data"

- name: "properties"
  description: "Properties owned by Baba"
- name: "interest"
  description: "Interest indicated by tenants"

basePath: "/fullstackchallenge"
schemes:
  - "http"
paths:
  /tenants:
    post:
      tags:
      - "tenants"
      summary: "Add a new tenant registeration"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "tenant object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        401:
          description: "duplicate field"
          schema:
            $ref: "#/definitions/failureResponse"
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/successResponse"
  /tenants/login:
        post:
          tags:
          - "tenants"
          summary: "Logs user into the system"
          description: ""
          consumes:
          - "application/json"
          produces:
          - "application/json"
          parameters:
          - name: "username"
            in: "formData"
            description: "The user name for login"
            required: true
            type: "string"
          - name: "password"
            in: "formData"
            description: "The password for login in clear text"
            required: true
            type: "string"
          responses:
            200:
              description: "Success"
              schema:
                $ref: "#/definitions/successResponse"
            404:
              description: "Failed to find user"
              schema:
                $ref: "#/definitions/failureResponse"
  /tenants/all:
          get:
            tags:
            - "tenants"
            summary: "Get array of all registered tenants"
            description: ""
            produces:
            - "application/json"
            parameters: []
            responses:
              200:
                description: "Success"
                schema:
                  type: "Array"
                  $ref: "#/definitions/Tenant"
            security:
            - apiKey: []
  /tenants/residence:
          get:
            tags:
            - "tenants"
            summary: "Get array of all tenants that are residence"
            description: ""
            produces:
            - "application/json"
            parameters: []
            responses:
              200:
                description: "Success"
                schema:
                  type: "Array"
                  $ref: "#/definitions/Tenant"
            security:
            - apiKey: []
  /tenants/vacate:
          get:
            tags:
            - "tenants"
            summary: "Get array of all tenants that are not residence"
            description: ""
            produces:
            - "application/json"
            parameters: []
            responses:
              200:
                description: "Success"
                schema:
                  type: "Array"
                  $ref: "#/definitions/Tenant"
            security:
            - apiKey: []
  /tenants/{id}:
          get:
            tags:
            - "tenants"
            summary: "Get a tenant by ID"
            description: ""
            produces:
            - "application/json"
            parameters:
            - name: "id"
              in: "path"
              required: true
              type: "string"
              description: "ID of the registered tenant"
            responses:
              200:
                description: OK
                schema:
                  $ref: "#/definitions/Tenant"
            security:
            - apiKey: []
          put:
            tags:
            - "tenants"
            summary: "Get a tenant by ID"
            description: "Get a tenant by ID"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "id"
              in: "path"
              required: true
              description: "ID of the registered tenant"
              type: "string"
            - name: "body"
              in: "body"
              required: true
              description: "Data of the Tenant to be updated"
              schema:
                $ref: "#/definitions/Tenant"
            responses:
              200:
                description: OK
                schema:
                  $ref: "#/definitions/Tenant"
            security:
            - apiKey: []
          delete:
              tags:
              - "tenants"
              summary: "Delete tenant by ID"
              description: ""
              produces:
              - "application/json"
              parameters:
              - name: "id"
                in: "path"
                required: true
                type: "string"
                description: "ID of the registered tenant to delete"
              responses:
                200:
                  description: OK
              security:
              - apiKey: []
  /property:
    post:
      tags:
      - "properties"
      summary: "Create new property"
      description: "Create new property"
      parameters:
      - in: "body"
        name: "body"
        description: "Property object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Property"
      responses:
        401:
          description: "duplicate field"
          schema:
            $ref: "#/definitions/failureResponse"
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/successProperty"
      security:
       - apiKey: []
    get:
      tags:
        - "properties"
      summary: "Get all propertied"
      description: ""
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/successProperty"
      security:
       - apiKey: []
  /property/{id}:
      get:
        tags:
          - "properties"
        summary: "Get property by ID"
        description: ""
        parameters: 
        - name: "id"
          in: "path"
          required: true
          type: "string"
          description: "ID of the property to get the data"
        responses:
          201:
            description: "Success"
            schema:
              $ref: "#/definitions/successProperty"
        security:
         - apiKey: []
      put:
        tags:
          - "properties"
        summary: "Get property by ID"
        description: ""
        parameters: 
        - name: "id"
          in: "path"
          required: true
          type: "string"
          description: "ID of the property to get the data"
        - name: "body"
          in: "body"
          required: true
          description: "Data of the Tenant to be updated"
          schema:
            $ref: "#/definitions/Property"
        responses:
          201:
            description: "Success"
            schema:
              $ref: "#/definitions/successProperty"
        security:
         - apiKey: []
      delete:
        tags:
          - "properties"
        summary: "Get property by ID"
        description: ""
        parameters: 
        - name: "id"
          in: "path"
          required: true
          type: "string"
          description: "ID of the property to get the data"
        responses:
          201:
            description: "Success"
        security:
         - apiKey: []
  /property/occupied:
      get:
        tags:
        - "properties"
        summary: "Get array of all Properties that occupied"
        description: ""
        produces:
        - "application/json"
        parameters: []
        responses:
          200:
            description: "Success"
            schema:
              type: "Array"
              $ref: "#/definitions/Property"
        security:
        - apiKey: []
  /property/vacant:
      get:
        tags:
        - "properties"
        summary: "Get array of all properties that are vacant"
        description: ""
        produces:
        - "application/json"
        parameters: []
        responses:
          200:
            description: "Success"
            schema:
              type: "Array"
              $ref: "#/definitions/Property"
        security:
        - apiKey: []
  
  /interest:
    post:
      tags:
      - "interest"
      summary: "Create tenant interest in property"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object of interest"
        required: true
        schema:
          $ref: "#/definitions/Interest"
      responses:
        401:
          description: "duplicate field"
          schema:
            $ref: "#/definitions/failureResponse"
        201:
          description: "Success"
      security:
       - apiKey: []
  /interest/{id}:
    delete:
        tags:
          - "interest"
        summary: "Delete interest by id"
        description: ""
        parameters: 
        - name: "id"
          in: "path"
          required: true
          type: "string"
          description: "ID of the property to get the data"
        responses:
          201:
            description: "Success"
        security:
         - apiKey: []
  /interest/{propertyId}/{tenantId}:
    get:
        tags:
          - "interest"
        summary: "Get interest by Tenant and Property"
        description: ""
        parameters: 
        - name: "propertyId"
          in: "path"
          required: true
          type: "string"
          description: "ID of the property to get intere"
        - name: "tenantId"
          in: "path"
          required: true
          type: "string"
          description: "ID of the tenant to get the data"
        responses:
          200:
            description: "Success"
            schema:
              $ref: "#/definitions/Interest"
        security:
         - apiKey: []
  /interest/tenant/{tenantId}:
    get:
        tags:
          - "interest"
        summary: "Get all interest on a Property"
        description: ""
        parameters: 
        - name: "tenantId"
          in: "path"
          required: true
          type: "string"
          description: "ID of the tenant to get the data"
        responses:
          200:
            description: "Success"
            schema:
              type: "Array"
              $ref: "#/definitions/Interest"
        security:
         - apiKey: []
  /interest/property/{propertyId}:
    get:
        tags:
          - "interest"
        summary: "Get all interest of a tenant"
        description: ""
        parameters: 
        - name: "propertyId"
          in: "path"
          required: true
          type: "string"
          description: "ID of the property to get intere"
        responses:
          200:
            description: "Success"
            schema:
              type: "Array"
              $ref: "#/definitions/Interest"
        security:
         - apiKey: []
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Tenant:
   type: "object"
   properties:
    id:
      type: "string"
    fullName:
      type: "string"
    phoneNumber:
      type: "string"
      uniqueItems: true
    password:
      type: "string"
    email:
      type: "string"
      uniqueItems: true
    status:
      type: "boolean"
      default: false
      description: "Status of the tenant if already a resident"
    dateCreated:
      type: "string"
      format: "time"
      default: Date.now
    dateModified:
      type: "string"
      format: "date-time"
  Property:
    type: "object"
    properties:
      id:
        type: "string"
      propertyName:
        type: "string"
      propertyType: 
        type: "string"
      propertyStatus:
        type: "boolean"
      dateAdded:
        type: "string"
        format: "time"
        default: Date.now
      dateModified:
        type: "string"
        format: "time"
  Interest:
    type: "object"
    properties:
      id:
        type: "string"
      tenant:
        type: "string"
        $ref: "#/definitions/Tenant"
      property:
        type: "string"
        $ref: "#/definitions/Property"
      dateOfInt:
        type: "string"
        format: "time"
        default: Date.now
      dateModified:
        type: "string"
        format: "time"
        default: Date.now
  successResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      body:
        type: "object"
        $ref: "#/definitions/Tenant"
      message:
        type: "string"
      token:
        type: "string"
  failureResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  successProperty:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      body:
        type: "object"
        $ref: "#/definitions/Property"
      message:
        type: "string"
      token:
        type: "string"

    